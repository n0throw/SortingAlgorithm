let BestCase = new Map();
let AverageCase = new Map();
let WorstCase = new Map();
let Description = new Map();

BestCase.set("BubbleSort", "O(n)");
AverageCase.set("BubbleSort", "O(n^{2})");
WorstCase.set("BubbleSort", "O(n^{2})");
Description.set("BubbleSort", "Алгоритм состоит из повторяющихся проходов по сортируемому массиву. За каждый проход элементы последовательно сравниваются попарно и, если порядок в паре неверный, выполняется обмен элементов. Проходы по массиву повторяются n - 1 раз или до тех пор, пока на очередном проходе не окажется, что обмены больше не нужны, что означает — массив отсортирован. При каждом проходе алгоритма по внутреннему циклу, очередной наибольший элемент массива ставится на своё место в конце массива рядом с предыдущим «наибольшим элементом», а наименьший элемент перемещается на одну позицию к началу массива («всплывает» до нужной позиции, как пузырёк в воде — отсюда и название алгоритма).");

BestCase.set("CocktailSort", "O(n)");
AverageCase.set("CocktailSort", "O(n^{2})");
WorstCase.set("CocktailSort", "O(n^{2})");
Description.set("CocktailSort", "Шейкер-сортировка является усовершенствованным методом пузырьковой сортировки. Анализируя метод пузырьковой сортировки, можно отметить два обстоятельства. 1. Если при движении по части массива перестановки не происходят, то эта часть массива уже отсортирована и, следовательно, ее можно исключить из рассмотрения. 2. При движении от конца массива к началу минимальный элемент «всплывает» на первую позицию, а максимальный элемент сдвигается только на одну позицию вправо.");

BestCase.set("InsertionSort", "O(n)");
AverageCase.set("InsertionSort", "O(n^{2})");
WorstCase.set("InsertionSort", "O(n^{2})");
Description.set("InsertionSort", "На каждом шаге алгоритма сортировки встаками выбирается один из элементов входного массива и вставляется на нужную позицию в уже отсортированном массиве, до тех пор, пока входных элементы не будут исчерпана. Метод выбора очередного элемента из исходного массива произволен; может использоваться практически любой алгоритм выбора. Обычно (и с целью получения устойчивого алгоритма сортировки), элементы вставляются по порядку их появления во входном массиве. В приведённой ниже реализации на JavaScript алгоритма сортировки встаками используется именно эта стратегия выбора.");

BestCase.set("GnomeSort", "O(n)");
AverageCase.set("GnomeSort", "O(n^{2})");
WorstCase.set("GnomeSort", "O(n^{2})");
Description.set("GnomeSort", "Гномья сортировка (англ. Gnome sort) — алгоритм сортировки, похожий на сортировку вставками, но в отличие от последней перед вставкой на нужное место происходит серия обменов, как в сортировке пузырьком.");

BestCase.set("InsertionSort", "O(n)");
AverageCase.set("InsertionSort", "O(n^{2})");
WorstCase.set("InsertionSort", "O(n^{2})");
Description.set("InsertionSort", "");




